template st.cpp.instances.Component : st.cpp.common.ComponentHelper
implements st.cpp.instances.ComponentInstances{

st.cpp.membrane.ControllerGenerator ctrlGenerator = plugin(st.cpp.membrane);

$${

isClient ::= [ "client" : "true" ]
isServer ::= [ "server" : "true" ]

ComponentInstances(topLevelDefinition, definition, instances) ::= <<
  // TODO: cleanup since it's useless now (remove ComponentInstances.sti at the same time)
>>

TopLevelInstances(topLevelDefinition, definitions, instances) ::= <<
/* Generated file: <topLevelDefinition;format="nameToPath">_<definition.name;format="toCName">_instances.cpp */

#include "<topLevelDefinition.name;format="nameToPath">.adl.hpp"

using namespace __ns_<topLevelDefinition.name;format="toCName">;


<if (topLevelDefinition.astDecorations.("is-singleton"))>
/* Singleton TopLevelInstance: use static getInstance member method */
<topLevelDefinition.name; format="toCName">Definition *__component_toplevel = &(<topLevelDefinition.name; format="toCName">Definition::getInstance());
<else>
/* Multi-instantiable TopLevelInstance ("new" can be called on the class) */
<topLevelDefinition.name; format="toCName">Definition __component_toplevel;
<endif>
>>

}$$

}