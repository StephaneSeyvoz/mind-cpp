/**
 * Copyright (C) 2014 Schneider-Electric
 *
 * This file is part of "Mind Compiler" is free software: you can redistribute 
 * it and/or modify it under the terms of the GNU Lesser General Public License 
 * as published by the Free Software Foundation, either version 3 of the 
 * License, or (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful, but WITHOUT 
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE.  See the GNU Lesser General Public License for more
 * details.
 *
 * You should have received a copy of the GNU Lesser General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 *
 * Contact: mind@ow2.org
 *
 * Authors: Stephane Seyvoz (Assystem)
 * Contributors: 
 */

package org.ow2.mind.adl;

import static org.ow2.mind.PathHelper.fullyQualifiedNameToPath;

import java.io.File;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;
import java.util.Map;

import org.antlr.stringtemplate.StringTemplate;
import org.objectweb.fractal.adl.ADLException;
import org.objectweb.fractal.adl.CompilerError;
import org.objectweb.fractal.adl.Definition;
import org.objectweb.fractal.adl.interfaces.Interface;
import org.objectweb.fractal.adl.interfaces.InterfaceContainer;
import org.objectweb.fractal.adl.types.TypeInterface;
import org.ow2.mind.SourceFileWriter;
import org.ow2.mind.adl.ast.ASTHelper;
import org.ow2.mind.adl.ast.Binding;
import org.ow2.mind.adl.ast.BindingContainer;
import org.ow2.mind.adl.ast.Component;
import org.ow2.mind.adl.ast.ComponentContainer;
import org.ow2.mind.idl.IDLLoader;
import org.ow2.mind.idl.ast.IDL;
import org.ow2.mind.idl.ast.InterfaceDefinition;
import org.ow2.mind.io.IOErrors;

import com.google.inject.Inject;
import com.google.inject.name.Named;

/**
 * {@link DefinitionSourceGenerator} component that generated {@value #FILE_EXT}
 * files using the {@value #DEFAULT_TEMPLATE} template.
 */
public class CppDefinitionHeaderSourceGenerator extends AbstractSourceGenerator
    implements
      DefinitionSourceGenerator {

  /** The name to be used to inject the templateGroupName used by this class. */
  public static final String    TEMPLATE_NAME    = "cpp.definitions.header";

  /** The default templateGroupName used by this class. */
  public static final String    DEFAULT_TEMPLATE = "st.cpp.definitions.header.Component";

  protected final static String FILE_EXT         = ".adl.hpp";

  @Inject
  protected CppDefinitionHeaderSourceGenerator(
      @Named(TEMPLATE_NAME) final String templateGroupName) {
    super(templateGroupName);
  }

  @Inject
  protected IDLLoader idlLoaderItf;

  @Inject
  protected ADLLoader adlLoaderItf;

  /**
   * A static method that returns the name of the file that is generated by this
   * component for the given {@link Definition};
   * 
   * @param definition a {@link Definition} node.
   * @return the name of the file that is generated by this component for the
   *         given {@link Definition};
   */
  public static String getHeaderFileName(final Definition definition) {
    return fullyQualifiedNameToPath(definition.getName(), FILE_EXT);
  }

  // ---------------------------------------------------------------------------
  // Implementation of the DefinitionSourceGenerator interface
  // ---------------------------------------------------------------------------

  public void visit(final Definition definition,
      final Map<Object, Object> context) throws ADLException {
    final File outputFile = outputFileLocatorItf.getCSourceOutputFile(
        getHeaderFileName(definition), context);

    if (regenerate(outputFile, definition, context)) {

      /** prepare data for straightforward serialization */
      decorateDefinitionWithRoleFilteredInterfaces(definition);
      decorateServerInterfacesWithAccordingInterfaceDefinition(definition,
          context);
      if (definition instanceof ComponentContainer) {
        decorateDefinitionWithFilteredSingletons(
            (ComponentContainer) definition, context);

        if (definition instanceof BindingContainer)
          decorateBindingsWhenSourceSingleton(definition, context);
      }
      /** */

      final StringTemplate st = getInstanceOf("ComponentDefinitionHeader");
      st.setAttribute("definition", definition);

      try {
        SourceFileWriter.writeToFile(outputFile, st.toString());
      } catch (final IOException e) {
        throw new CompilerError(IOErrors.WRITE_ERROR, e,
            outputFile.getAbsolutePath());
      }
    }
  }

  private void decorateBindingsWhenSourceSingleton(final Definition definition,
      final Map<Object, Object> context) throws ADLException {
    Component fromComp = null;
    Definition fromCompDef = null;
    for (final Binding binding : ((BindingContainer) definition).getBindings()) {
      fromComp = ASTHelper.getComponent(definition, binding.getFromComponent());
      fromCompDef = ASTHelper.getResolvedComponentDefinition(fromComp,
          adlLoaderItf, context);

      if (ASTHelper.isSingleton(fromCompDef))
        binding.astSetDecoration("fromComponent-singleton", true);
    }

  }

  private void decorateDefinitionWithFilteredSingletons(
      final ComponentContainer container, final Map<Object, Object> context)
      throws ADLException {

    Definition compDef = null;
    final List<Component> subSingletons = new ArrayList<Component>();
    for (final Component comp : container.getComponents()) {
      compDef = ASTHelper.getResolvedComponentDefinition(comp, adlLoaderItf,
          context);
      if (ASTHelper.isSingleton(compDef)) subSingletons.add(comp);
    }

    if (!subSingletons.isEmpty())
      container.astSetDecoration("singletons", subSingletons);
  }

  private void decorateDefinitionWithRoleFilteredInterfaces(
      final Definition definition) {

    final List<TypeInterface> serverInterfaces = new ArrayList<TypeInterface>();
    final List<TypeInterface> clientInterfaces = new ArrayList<TypeInterface>();

    // defensive
    if (!(definition instanceof InterfaceContainer)) return;

    final InterfaceContainer itfContainer = (InterfaceContainer) definition;

    for (final Interface currItf : itfContainer.getInterfaces()) {
      if (!(currItf instanceof TypeInterface)) continue;
      final TypeInterface currTypeItf = (TypeInterface) currItf;

      if (currTypeItf.getRole().equals(TypeInterface.SERVER_ROLE))
        serverInterfaces.add(currTypeItf);

      if (currTypeItf.getRole().equals(TypeInterface.CLIENT_ROLE))
        clientInterfaces.add(currTypeItf);
    }

    if (!serverInterfaces.isEmpty())
      definition.astSetDecoration("serverItfInstances", serverInterfaces);

    if (!clientInterfaces.isEmpty())
      definition.astSetDecoration("clientItfInstances", clientInterfaces);
  }

  /**
   * This utility method allows us to find the method definitions to be declared
   * as virtual in the StringTemplate InterfaceInstanceClassDef rule, for C++
   * inheritance sake.
   * 
   * @param definition
   * @param context
   * @throws ADLException when a server interface signature can't be loaded
   */
  private void decorateServerInterfacesWithAccordingInterfaceDefinition(
      final Definition definition, final Map<Object, Object> context)
      throws ADLException {

    // defensive
    if (!(definition instanceof InterfaceContainer)) return;

    final InterfaceContainer itfContainer = (InterfaceContainer) definition;

    for (final Interface currItf : itfContainer.getInterfaces()) {
      if (!(currItf instanceof TypeInterface)) continue;
      final TypeInterface currTypeItf = (TypeInterface) currItf;

      // found one
      if (currTypeItf.getRole().equals(TypeInterface.SERVER_ROLE)) {

        // load according InterfaceDefinition
        final IDL currItfIDL = idlLoaderItf.load(currTypeItf.getSignature(),
            context);

        if (currItfIDL instanceof InterfaceDefinition) {
          final InterfaceDefinition currItfItfDef = (InterfaceDefinition) currItfIDL;

          // decorate our instance
          currItf.astSetDecoration("interfaceDefinition", currItfItfDef);
        }
      }
    }

  }

}
